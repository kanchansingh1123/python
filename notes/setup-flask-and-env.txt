Steps to setup flask virtual enviroment.

1. Add requirement.txt (specify the packages to be installed)
2. pip install virtualenv (virtual environment tool will be installed at global/system level)
3. virtualenv --version (To check the virtual environment version)
4. virtualenv my_env (To create a new virtual environment under my_env folder)

        Or 
        
        python -m venv c:\path\to\myenv (direct installation without virtualenv)

        Or - Using different python

        PathToPython\python -m venv myenv

        Or
        
        %PYTHONROOT%\python -m venv myenv

This is (my_env) where Python packages will be installed.

If you want to specify the Python interpreter of your choice, for example, Python 3, it can be done using the following command:

5. virtualenv -p /usr/bin/python3 my_env  (If you want t point different python/python interpreter) 

Select the Python Interpreter in VSCODE - 

    Press Shift + Control + P to open the Command Palette and click on the Python: Select Interpreter.

Activate a Virtual Environment on Windows

6. cd <envname>
7. Scripts\activate

Activate a virtual environment on Linux

8. source virtualenv_name/bin/activate

Deaactivate virtual environment

9. deactivate (Run this command when virtual enviroment in in active mode)


WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.

WSGI - Web Server Gateway Interface. 

        It is a specification that describes how a web server communicates with web applications, 
        and how web applications can be chained together to process one request.

__pycache__

        is a directory that is created by the Python interpreter when it imports a module.
        It contains the compiled bytecode of the module, which can be used to speed up subsequent imports of the same module.

Command to clean: Pure Python cross-platform pyclean. Clean up your Python bytecode.

        pip install pyclean

        pyclean .

flask-restplus

        Flask-RESTPlus is an extension for Flask that adds support for quickly building REST APIs. 
        Flask-RESTPlus encourages best practices with minimal setup

Flask-RESTplus started as a fork of Flask-RESTful

        I've used both, and the only reason we switched to Flask-restplus was the desire to have auto generated Swagger documentation.
        In my experience, there are no other noticeable differences. Flask-RESTplus started as a fork of Flask-RESTful.

        According to https://github.com/noirbizarre/flask-restplus/issues/593, the Flask Restplus is most probably dead and abandoned.
        The last commit was on October 1, 2018. It looks like the project is not being actively maintained anymore.

        Therefore, I advise that you use Flask Restful despite the auto generated Swagger docs in Restplus. 
        Since Restplus is not maintained, it is most likely that the implementation will sooner or later go out of date. 
        Rather than switching to Restful once Restplus goes out of date, I think starting off with Restful itself would be the better idea here.

        Flask-RESTplus is dead.


Connexion:
        Connexion is a modern Python web framework that makes spec-first and api-first development easy. 
        You describe your API in an OpenAPI (or swagger) specification with as much detail as you want and 
        Connexion will guarantee that it works as you specified.

        https://connexion.readthedocs.io/en/latest/


        Note: While using connexion, it is must to install flask, swagger-ui and other libraries using connection


        pip install "connexion[flask]" 
        pip install "connexion[swagger-ui]"

        http://localhost:5001/api

        http://localhost:5001/api/ui/

        connexion uses "uvicorn" server internally

        Based on your specification, Connexion provides the following functionality:

                - Automatic routing to your Python functions
                - Authentication
                - Request validation
                - arameter parsing and injection
                - Response serialization
                - Response validation
                - A Swagger UI console with live documentation and ‘try it out’ feature

Serializer:
        To convert complex data types to and from Python data types.
        Flask-Marshmallow extends the Marshmallow library and provides additional features when you work with Flask.
        pip install "flask-marshmallow[sqlalchemy]"

        Flask-Marshmallow also installs marshmallow, which provides functionality to serialize and 
        deserialize Python objects as they flow in and out of your REST API, which is based on JSON.

        Marshmallow converts Python class instances to objects that can be converted to JSON.

        Flask-Marshmallow also installs marshmallow, which provides functionality to serialize and deserialize Python objects as they flow in and out of your REST API, which is based on JSON. 
        Marshmallow converts Python class instances to objects that can be converted to JSON.

        serializing means converting Python objects, which can contain other Python objects and complex data types, into simpler data structures that can be parsed into JSON data types

SQLAlchemy:
        SQLAlchemy provides an object-relational model (ORM), which stores each Python object to a database representation of the object’s data.

        You’re going to use SQLite as the database engine to store the PEOPLE data. 
        SQLite is a widely used relational database management system (RDBMS) that doesn’t need a SQL server to work.

        In contrast to other SQL database engines, SQLite works with a single file to maintain all the database functionality. 
        Therefore, to use the database, a program just needs to know how to read and write to a SQLite file.

        SQLAlchemy will sanitize user data for you before creating SQL statements. It’s another big advantage and a reason to use SQLAlchemy when working with databases.

        Use SQLAlchemy to save Python objects to your database

        Python’s built-in sqlite3 module allows you to interact with SQLite databases without any external packages. 
        This makes SQLite particularly useful when starting new Python projects.

        Using SQLAlchemy allows you to think in terms of objects with behavior rather than dealing with raw SQL.

        Start a new Python interactive shell to create the people.db SQLite database:

        import sqlite3
        conn = sqlite3.connect("people.db")
        columns = [
             "id INTEGER PRIMARY KEY",
             "lname VARCHAR UNIQUE",
             "fname VARCHAR",
             "timestamp DATETIME",
        ]
        create_table_cmd = f"CREATE TABLE person ({','.join(columns)})"
        conn.execute(create_table_cmd)

people.db-journal file
        Such -journal files do not need to (and should not) be distributed.
        This is because the various journal files represent temporary data (ref. SQLite's Use Of Temporary Disk Files) used by SQLite.
        In particular a -journal file is a rollback journal.

Interact With the Database:
        conn = sqlite3.connect("people.db")
        cur = conn.cursor()
        cur.execute("SELECT * FROM person")
        people = cur.fetchall()
        for person in people:
                print(person)


Note:
	Working with SQLAlchemy’s modeled data inside your programs is very convenient.
	However, the REST API works with JSON data, and here you can run into an issue with the SQLAlchemy model.
	
	Because SQLAlchemy returns data as Python class instances, Connexion can’t serialize these class instances to JSON-formatted data.
	
	In this context, serializing means converting Python objects, which can contain other Python objects and complex data types, into simpler data structures that can be parsed into JSON data types.


