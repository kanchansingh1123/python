Steps to setup flask virtual enviroment.

1. Add requirement.txt (specify the packages to be installed)
2. pip install virtualenv (virtual environment tool will be installed at global/system level)
3. virtualenv --version (To check the virtual environment version)
4. virtualenv my_env (To create a new virtual environment under my_env folder)

        Or 
        
        python -m venv c:\path\to\myenv (direct installation without virtualenv)

        Or - Using different python

        PathToPython\python -m venv myenv

        Or
        
        %PYTHONROOT%\python -m venv myenv

This is (my_env) where Python packages will be installed.

If you want to specify the Python interpreter of your choice, for example, Python 3, it can be done using the following command:

5. virtualenv -p /usr/bin/python3 my_env  (If you want t point different python/python interpreter) 

Select the Python Interpreter in VSCODE - 

    Press Shift + Control + P to open the Command Palette and click on the Python: Select Interpreter.

Activate a Virtual Environment on Windows

6. cd <envname>
7. Scripts\activate

Activate a virtual environment on Linux

8. source virtualenv_name/bin/activate

Deaactivate virtual environment

9. deactivate (Run this command when virtual enviroment in in active mode)


WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.

WSGI - Web Server Gateway Interface. 

        It is a specification that describes how a web server communicates with web applications, 
        and how web applications can be chained together to process one request.

__pycache__

        is a directory that is created by the Python interpreter when it imports a module.
        It contains the compiled bytecode of the module, which can be used to speed up subsequent imports of the same module.

Command to clean: Pure Python cross-platform pyclean. Clean up your Python bytecode.

        pip install pyclean

        pyclean .

flask-restplus

        Flask-RESTPlus is an extension for Flask that adds support for quickly building REST APIs. 
        Flask-RESTPlus encourages best practices with minimal setup

Flask-RESTplus started as a fork of Flask-RESTful

        I've used both, and the only reason we switched to Flask-restplus was the desire to have auto generated Swagger documentation.
        In my experience, there are no other noticeable differences. Flask-RESTplus started as a fork of Flask-RESTful.

        According to https://github.com/noirbizarre/flask-restplus/issues/593, the Flask Restplus is most probably dead and abandoned.
        The last commit was on October 1, 2018. It looks like the project is not being actively maintained anymore.

        Therefore, I advise that you use Flask Restful despite the auto generated Swagger docs in Restplus. 
        Since Restplus is not maintained, it is most likely that the implementation will sooner or later go out of date. 
        Rather than switching to Restful once Restplus goes out of date, I think starting off with Restful itself would be the better idea here.

        Flask-RESTplus is dead.


Connexion:
        Connexion is a modern Python web framework that makes spec-first and api-first development easy. 
        You describe your API in an OpenAPI (or swagger) specification with as much detail as you want and 
        Connexion will guarantee that it works as you specified.

        https://connexion.readthedocs.io/en/latest/


        