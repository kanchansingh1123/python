# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Address(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, line1: str=None, city: str=None, state_code: str=None, zip_code: str=None):  # noqa: E501
        """Address - a model defined in Swagger

        :param line1: The line1 of this Address.  # noqa: E501
        :type line1: str
        :param city: The city of this Address.  # noqa: E501
        :type city: str
        :param state_code: The state_code of this Address.  # noqa: E501
        :type state_code: str
        :param zip_code: The zip_code of this Address.  # noqa: E501
        :type zip_code: str
        """
        self.swagger_types = {
            'line1': str,
            'city': str,
            'state_code': str,
            'zip_code': str
        }

        self.attribute_map = {
            'line1': 'line1',
            'city': 'city',
            'state_code': 'stateCode',
            'zip_code': 'zipCode'
        }
        self._line1 = line1
        self._city = city
        self._state_code = state_code
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def line1(self) -> str:
        """Gets the line1 of this Address.


        :return: The line1 of this Address.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1: str):
        """Sets the line1 of this Address.


        :param line1: The line1 of this Address.
        :type line1: str
        """

        self._line1 = line1

    @property
    def city(self) -> str:
        """Gets the city of this Address.


        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Address.


        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def state_code(self) -> str:
        """Gets the state_code of this Address.

        2 Letter State Code  # noqa: E501

        :return: The state_code of this Address.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code: str):
        """Sets the state_code of this Address.

        2 Letter State Code  # noqa: E501

        :param state_code: The state_code of this Address.
        :type state_code: str
        """
        allowed_values = ["AL", "AK", "AZ", "AR", "CA"]  # noqa: E501
        if state_code not in allowed_values:
            raise ValueError(
                "Invalid value for `state_code` ({0}), must be one of {1}"
                .format(state_code, allowed_values)
            )

        self._state_code = state_code

    @property
    def zip_code(self) -> str:
        """Gets the zip_code of this Address.


        :return: The zip_code of this Address.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code: str):
        """Sets the zip_code of this Address.


        :param zip_code: The zip_code of this Address.
        :type zip_code: str
        """

        self._zip_code = zip_code
