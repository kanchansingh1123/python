# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.customer_list import CustomerList  # noqa: F401,E501
from swagger_server.models.paged_response import PagedResponse  # noqa: F401,E501
from swagger_server.models.paged_response_pageable import PagedResponsePageable  # noqa: F401,E501
from swagger_server.models.paged_response_pageable_sort import PagedResponsePageableSort  # noqa: F401,E501
from swagger_server import util


class CustomerPagedList(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pageable: PagedResponsePageable=None, total_pages: int=None, last: bool=None, total_elements: int=None, size: int=None, number: int=None, number_of_elements: int=None, sort: PagedResponsePageableSort=None, first: bool=None, content: CustomerList=None):  # noqa: E501
        """CustomerPagedList - a model defined in Swagger

        :param pageable: The pageable of this CustomerPagedList.  # noqa: E501
        :type pageable: PagedResponsePageable
        :param total_pages: The total_pages of this CustomerPagedList.  # noqa: E501
        :type total_pages: int
        :param last: The last of this CustomerPagedList.  # noqa: E501
        :type last: bool
        :param total_elements: The total_elements of this CustomerPagedList.  # noqa: E501
        :type total_elements: int
        :param size: The size of this CustomerPagedList.  # noqa: E501
        :type size: int
        :param number: The number of this CustomerPagedList.  # noqa: E501
        :type number: int
        :param number_of_elements: The number_of_elements of this CustomerPagedList.  # noqa: E501
        :type number_of_elements: int
        :param sort: The sort of this CustomerPagedList.  # noqa: E501
        :type sort: PagedResponsePageableSort
        :param first: The first of this CustomerPagedList.  # noqa: E501
        :type first: bool
        :param content: The content of this CustomerPagedList.  # noqa: E501
        :type content: CustomerList
        """
        self.swagger_types = {
            'pageable': PagedResponsePageable,
            'total_pages': int,
            'last': bool,
            'total_elements': int,
            'size': int,
            'number': int,
            'number_of_elements': int,
            'sort': PagedResponsePageableSort,
            'first': bool,
            'content': CustomerList
        }

        self.attribute_map = {
            'pageable': 'pageable',
            'total_pages': 'totalPages',
            'last': 'last',
            'total_elements': 'totalElements',
            'size': 'size',
            'number': 'number',
            'number_of_elements': 'numberOfElements',
            'sort': 'sort',
            'first': 'first',
            'content': 'content'
        }
        self._pageable = pageable
        self._total_pages = total_pages
        self._last = last
        self._total_elements = total_elements
        self._size = size
        self._number = number
        self._number_of_elements = number_of_elements
        self._sort = sort
        self._first = first
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> 'CustomerPagedList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomerPagedList of this CustomerPagedList.  # noqa: E501
        :rtype: CustomerPagedList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pageable(self) -> PagedResponsePageable:
        """Gets the pageable of this CustomerPagedList.


        :return: The pageable of this CustomerPagedList.
        :rtype: PagedResponsePageable
        """
        return self._pageable

    @pageable.setter
    def pageable(self, pageable: PagedResponsePageable):
        """Sets the pageable of this CustomerPagedList.


        :param pageable: The pageable of this CustomerPagedList.
        :type pageable: PagedResponsePageable
        """

        self._pageable = pageable

    @property
    def total_pages(self) -> int:
        """Gets the total_pages of this CustomerPagedList.


        :return: The total_pages of this CustomerPagedList.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages: int):
        """Sets the total_pages of this CustomerPagedList.


        :param total_pages: The total_pages of this CustomerPagedList.
        :type total_pages: int
        """

        self._total_pages = total_pages

    @property
    def last(self) -> bool:
        """Gets the last of this CustomerPagedList.


        :return: The last of this CustomerPagedList.
        :rtype: bool
        """
        return self._last

    @last.setter
    def last(self, last: bool):
        """Sets the last of this CustomerPagedList.


        :param last: The last of this CustomerPagedList.
        :type last: bool
        """

        self._last = last

    @property
    def total_elements(self) -> int:
        """Gets the total_elements of this CustomerPagedList.


        :return: The total_elements of this CustomerPagedList.
        :rtype: int
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements: int):
        """Sets the total_elements of this CustomerPagedList.


        :param total_elements: The total_elements of this CustomerPagedList.
        :type total_elements: int
        """

        self._total_elements = total_elements

    @property
    def size(self) -> int:
        """Gets the size of this CustomerPagedList.


        :return: The size of this CustomerPagedList.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this CustomerPagedList.


        :param size: The size of this CustomerPagedList.
        :type size: int
        """

        self._size = size

    @property
    def number(self) -> int:
        """Gets the number of this CustomerPagedList.


        :return: The number of this CustomerPagedList.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number: int):
        """Sets the number of this CustomerPagedList.


        :param number: The number of this CustomerPagedList.
        :type number: int
        """

        self._number = number

    @property
    def number_of_elements(self) -> int:
        """Gets the number_of_elements of this CustomerPagedList.


        :return: The number_of_elements of this CustomerPagedList.
        :rtype: int
        """
        return self._number_of_elements

    @number_of_elements.setter
    def number_of_elements(self, number_of_elements: int):
        """Sets the number_of_elements of this CustomerPagedList.


        :param number_of_elements: The number_of_elements of this CustomerPagedList.
        :type number_of_elements: int
        """

        self._number_of_elements = number_of_elements

    @property
    def sort(self) -> PagedResponsePageableSort:
        """Gets the sort of this CustomerPagedList.


        :return: The sort of this CustomerPagedList.
        :rtype: PagedResponsePageableSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort: PagedResponsePageableSort):
        """Sets the sort of this CustomerPagedList.


        :param sort: The sort of this CustomerPagedList.
        :type sort: PagedResponsePageableSort
        """

        self._sort = sort

    @property
    def first(self) -> bool:
        """Gets the first of this CustomerPagedList.


        :return: The first of this CustomerPagedList.
        :rtype: bool
        """
        return self._first

    @first.setter
    def first(self, first: bool):
        """Sets the first of this CustomerPagedList.


        :param first: The first of this CustomerPagedList.
        :type first: bool
        """

        self._first = first

    @property
    def content(self) -> CustomerList:
        """Gets the content of this CustomerPagedList.


        :return: The content of this CustomerPagedList.
        :rtype: CustomerList
        """
        return self._content

    @content.setter
    def content(self, content: CustomerList):
        """Sets the content of this CustomerPagedList.


        :param content: The content of this CustomerPagedList.
        :type content: CustomerList
        """

        self._content = content
