# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.brewery import Brewery  # noqa: F401,E501
from swagger_server import util


class Beer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, beer_name: str=None, style: str=None, price: float=None, quantity_on_hand: int=None, brewery: Brewery=None):  # noqa: E501
        """Beer - a model defined in Swagger

        :param id: The id of this Beer.  # noqa: E501
        :type id: str
        :param beer_name: The beer_name of this Beer.  # noqa: E501
        :type beer_name: str
        :param style: The style of this Beer.  # noqa: E501
        :type style: str
        :param price: The price of this Beer.  # noqa: E501
        :type price: float
        :param quantity_on_hand: The quantity_on_hand of this Beer.  # noqa: E501
        :type quantity_on_hand: int
        :param brewery: The brewery of this Beer.  # noqa: E501
        :type brewery: Brewery
        """
        self.swagger_types = {
            'id': str,
            'beer_name': str,
            'style': str,
            'price': float,
            'quantity_on_hand': int,
            'brewery': Brewery
        }

        self.attribute_map = {
            'id': 'id',
            'beer_name': 'beerName',
            'style': 'style',
            'price': 'price',
            'quantity_on_hand': 'quantityOnHand',
            'brewery': 'brewery'
        }
        self._id = id
        self._beer_name = beer_name
        self._style = style
        self._price = price
        self._quantity_on_hand = quantity_on_hand
        self._brewery = brewery

    @classmethod
    def from_dict(cls, dikt) -> 'Beer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Beer of this Beer.  # noqa: E501
        :rtype: Beer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Beer.


        :return: The id of this Beer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Beer.


        :param id: The id of this Beer.
        :type id: str
        """

        self._id = id

    @property
    def beer_name(self) -> str:
        """Gets the beer_name of this Beer.


        :return: The beer_name of this Beer.
        :rtype: str
        """
        return self._beer_name

    @beer_name.setter
    def beer_name(self, beer_name: str):
        """Sets the beer_name of this Beer.


        :param beer_name: The beer_name of this Beer.
        :type beer_name: str
        """

        self._beer_name = beer_name

    @property
    def style(self) -> str:
        """Gets the style of this Beer.


        :return: The style of this Beer.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style: str):
        """Sets the style of this Beer.


        :param style: The style of this Beer.
        :type style: str
        """
        allowed_values = ["ALE", "PALE_ALE", "IPA", "WHEAT", "LAGER"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def price(self) -> float:
        """Gets the price of this Beer.


        :return: The price of this Beer.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Beer.


        :param price: The price of this Beer.
        :type price: float
        """

        self._price = price

    @property
    def quantity_on_hand(self) -> int:
        """Gets the quantity_on_hand of this Beer.


        :return: The quantity_on_hand of this Beer.
        :rtype: int
        """
        return self._quantity_on_hand

    @quantity_on_hand.setter
    def quantity_on_hand(self, quantity_on_hand: int):
        """Sets the quantity_on_hand of this Beer.


        :param quantity_on_hand: The quantity_on_hand of this Beer.
        :type quantity_on_hand: int
        """

        self._quantity_on_hand = quantity_on_hand

    @property
    def brewery(self) -> Brewery:
        """Gets the brewery of this Beer.


        :return: The brewery of this Beer.
        :rtype: Brewery
        """
        return self._brewery

    @brewery.setter
    def brewery(self, brewery: Brewery):
        """Sets the brewery of this Beer.


        :param brewery: The brewery of this Beer.
        :type brewery: Brewery
        """

        self._brewery = brewery
